---

networks:
  sentry-private:
    # NOTE: This network needs to be manually created and needs to
    #       be configured for manual container attachment
    external: true

services:
  # -- MAIN SERVICE --
  manager:
    image: ghcr.io/josh5/sentry-docker-swarm:latest
    build:
      context: docker
      dockerfile: Dockerfile
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 60s
      placement:
        constraints:
          - ${PLACEMENT_CONSTRAINT}
    environment:
      NETWORK_NAME: sentry-private
      # Releases:
      #   https://github.com/getsentry/self-hosted/releases
      SENTRY_VERSION: 25.5.1
      SENTRY_BEACON_DISABLED: ${SENTRY_BEACON_DISABLED}
      SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
      SENTRY_URL_PREFIX: ${SENTRY_URL_PREFIX}
      SENTRY_CUSTOM_DB_CONFIG: ${SENTRY_CUSTOM_DB_CONFIG}
      SENTRY_DB_NAME: ${SENTRY_DB_NAME}
      SENTRY_DB_USER: ${SENTRY_DB_USER}
      SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD}
      SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST}
      SENTRY_POSTGRES_PORT: ${SENTRY_POSTGRES_PORT}
      SENTRY_EVENT_RETENTION_DAYS: ${SENTRY_EVENT_RETENTION_DAYS:-90}
      SENTRY_COMPOSE_PROFILES: ${SENTRY_COMPOSE_PROFILES:-feature-complete}
      SENTRY_CUSTOM_MAIL_SERVER_CONFIG: ${SENTRY_CUSTOM_MAIL_SERVER_CONFIG}
      SENTRY_EMAIL_HOST: ${SENTRY_EMAIL_HOST}
      SENTRY_EMAIL_PORT: ${SENTRY_EMAIL_PORT}
      SENTRY_EMAIL_USER: ${SENTRY_EMAIL_USER}
      SENTRY_EMAIL_PASSWORD: ${SENTRY_EMAIL_PASSWORD}
      SENTRY_EMAIL_USE_TLS: ${SENTRY_EMAIL_USE_TLS}
      SENTRY_EMAIL_USE_SSL: ${SENTRY_EMAIL_USE_SSL}
      SENTRY_SERVER_EMAIL: ${SENTRY_SERVER_EMAIL}
      SENTRY_MAIL_HOST: ${SENTRY_MAIL_HOST}
      SENTRY_FILESTORE_BACKEND_S3_BUCKET: ${SENTRY_FILESTORE_BACKEND_S3_BUCKET}
      SENTRY_INITIAL_ADMIN_EMAIL: ${SENTRY_INITIAL_ADMIN_EMAIL}
      ADDITIONAL_APT_PACKAGES: ${ADDITIONAL_APT_PACKAGES}
      ADDITIONAL_PYTHON_MODULES: ${ADDITIONAL_PYTHON_MODULES}
      SENTRY_CONF_CUSTOM: ${SENTRY_CONF_CUSTOM}
      SENTRY_ENV_CUSTOM: ${SENTRY_ENV_CUSTOM}
      SENTRY_DATA_PATH: ${SENTRY_DATA_PATH}
      BACKUP_VOLUMES_ON_UPDATE: ${BACKUP_VOLUMES_ON_UPDATE:-false}
      EXEC_NUCLEAR_CLEAN: ${EXEC_NUCLEAR_CLEAN:-false}
      SKIP_ADMIN_USER_CREATE: ${SKIP_ADMIN_USER_CREATE:-false}
      ALWAYS_FORCE_RECREATE: ${ALWAYS_FORCE_RECREATE:-false}
      WEB_ONLY_MAINTENANCE_MODE: ${WEB_ONLY_MAINTENANCE_MODE:-false}
      DEPLOYMENT_ID: ${DEPLOYMENT_ID:-default}
      KEEP_ALIVE: ${KEEP_ALIVE:-true}
      DIND_CPU_SHARES: ${DIND_CPU_SHARES:-512}
      DIND_CPU_PERCENT: ${DIND_CPU_PERCENT:-75}
      DIND_MEMLIMIT: ${DIND_MEMLIMIT:-0}
      REDIS_MEMLIMIT: ${REDIS_MEMLIMIT:-0}
      PATCH_SNUBA: ${PATCH_SNUBA:-true}
      CUSTOM_LOG_DRIVER: ${CUSTOM_LOG_DRIVER:-local}
      FLUENTD_FORWARD_ADDRESS: ${FLUENTD_FORWARD_ADDRESS:-}
      FLUENTD_FORWARD_SHARED_KEY: ${FLUENTD_FORWARD_SHARED_KEY:-1234567890qwertyuiop}
      FLUENTD_FORWARD_USE_TLS: ${FLUENTD_FORWARD_USE_TLS:-true}
      FLUENTD_FORWARD_VERIFY_CERT: ${FLUENTD_FORWARD_VERIFY_CERT:-false}
      FLUENTD_FORWARD_VERIFY_CERT_HOSTNAME: ${FLUENTD_FORWARD_VERIFY_CERT_HOSTNAME:-false}
      FLUENTD_HTTP_ADDRESS: ${FLUENTD_HTTP_ADDRESS:-}
      FLUENTD_TAG: ${FLUENTD_TAG:-}
      FLUENTD_ADDITIONAL_SOURCE_TAGS: ${FLUENTD_ADDITIONAL_SOURCE_TAGS:-}
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: ${SENTRY_DATA_PATH}
        target: ${SENTRY_DATA_PATH}

  # -- REVERSE PROXY --
  proxy:
    image: library/nginx:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
      placement:
        constraints:
          - ${PLACEMENT_CONSTRAINT}
      labels:
        #### -- Enable traefik router for this service
        - "traefik.enable=true"
        - "traefik.http.services.swarm-sentry.loadbalancer.server.port=80"
        - "traefik.http.routers.swarm-sentry.entrypoints=web"
        # Configure router domain
        - "traefik.http.routers.swarm-sentry.rule=Host(`${TRAEFIK_DOMAIN}`)"
    environment:
      NETWORK_NAME: sentry-private
      SENTRY_DATA_PATH: ${SENTRY_DATA_PATH}
    volumes:
      - type: bind
        source: ${SENTRY_DATA_PATH}
        target: ${SENTRY_DATA_PATH}
    networks:
      - sentry-private
    ports:
      - target: 80
        published: 9080
        mode: host
    entrypoint: "sh"
    command: |
      -c '
      set -e

      dind_continer_name="sentry-swarm-dind"

      echo "Waiting for Sentry manager container..."
      sleep 5
      i=1
      while [ $$i -le 60 ]; do
        if [ -f "$${SENTRY_DATA_PATH:?}/self_hosted/.z-manager-service-running.txt" ]; then
            echo "  - The Sentry manager container is running"
            break
        fi
        echo "  - Sentry manager container check #$$i - Not yet running. Recheck in 10 seconds..."
        sleep 10
        i=$$((i + 1))
      done
      echo

      echo "Configuring Nginx proxy..."
      if [ ! -f "$${SENTRY_DATA_PATH:?}/self_hosted/nginx/nginx.conf" ]; then
        echo "  - Nginx Config does not yet exist. Exit!"
        exit 1
      fi
      cp -fv "$${SENTRY_DATA_PATH:?}/self_hosted/nginx/nginx.conf" "/etc/nginx/nginx.conf"
      sed -i "s|server relay|server $${dind_continer_name:?}|" "/etc/nginx/nginx.conf"
      sed -i "s|server web|server $${dind_continer_name:?}|" "/etc/nginx/nginx.conf"
      cat /etc/nginx/nginx.conf
      echo

      echo "Running Nginx entrypoint..."
      /docker-entrypoint.sh nginx -g "daemon off;" 
      echo
      '
